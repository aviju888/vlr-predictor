[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vlr-valorant-predictor"
version = "0.1.0"
description = "Predict Valorant match outcomes using VLR.gg data"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "VLR Predictor Team", email = "team@vlr-predictor.com"}
]
keywords = ["valorant", "esports", "prediction", "machine-learning", "api"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Games/Entertainment",
]

dependencies = [
    "fastapi==0.115.0",
    "uvicorn[standard]==0.30.6",
    "httpx==0.27.2",
    "pydantic==2.9.2",
    "pydantic-settings==2.6.1",
    "cachetools==5.5.0",
    "numpy==2.1.1",
    "pandas==2.2.2",
    "scikit-learn==1.5.2",
    "matplotlib==3.9.2",
]

[project.optional-dependencies]
dev = [
    "pytest==8.3.2",
    "pytest-asyncio==0.24.0",
    "pytest-cov==6.0.0",
    "black==24.10.0",
    "ruff==0.8.4",
    "mypy==1.13.0",
    "pre-commit==4.0.1",
]
llm = [
    "openai>=1.0.0",
    "anthropic>=0.40.0",
]
notebooks = [
    "jupyter==1.1.1",
    "jupyterlab==4.3.5",
    "seaborn==0.13.2",
    "plotly==5.24.1",
]

[project.urls]
Homepage = "https://github.com/vlr-predictor/vlr-valorant-predictor"
Documentation = "https://vlr-predictor.readthedocs.io"
Repository = "https://github.com/vlr-predictor/vlr-valorant-predictor.git"
Issues = "https://github.com/vlr-predictor/vlr-valorant-predictor/issues"

[project.scripts]
vlr-predictor = "app.main:app"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*", "scripts*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cachetools.*",
    "httpx.*",
    "sklearn.*",
    "matplotlib.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
